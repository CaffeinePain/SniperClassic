using RoR2;
using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.Networking;

namespace SniperClassic
{
    class SpotterFollowerController : NetworkBehaviour
    {
		private void FixedUpdate()
		{
			if (this.cachedTargetBodyObject != this.targetBodyObject)
			{
				this.cachedTargetBodyObject = this.targetBodyObject;
				this.OnTargetChanged();
			}
			if (NetworkServer.active)
			{
				this.FixedUpdateServer();
			}
		}

		[Server]
		public void AssignNewTarget(GameObject target)
		{
			if (!NetworkServer.active)
			{
				return;
			}

			if (this.ownerBodyObject == null)
            {
				Debug.Log("null owner");
            }
			else
            {
				Debug.Log("valid owner");
			}

			//this.targetBodyObject = target;//added
			this.NetworktargetBodyObject = (target ? target : this.ownerBodyObject);
			this.cachedTargetBodyObject = this.targetBodyObject;
			this.cachedTargetHealthComponent = (this.cachedTargetBodyObject ? this.cachedTargetBodyObject.GetComponent<HealthComponent>() : null);
			this.OnTargetChanged();
			/*if (this.targetBodyObject.GetComponent<CharacterBody>())
			{
				EffectManager.SimpleImpactEffect(this.burstHealEffect, this.GetTargetPosition(), Vector3.up, true);
			}*/

			this.DoHeal(this.fractionHealthBurst);
		}

		private void OnTargetChanged()
		{
			this.cachedTargetHealthComponent = (this.cachedTargetBodyObject ? this.cachedTargetBodyObject.GetComponent<HealthComponent>() : null);
		}

		private void FixedUpdateServer()
		{
			this.healingTimer -= Time.fixedDeltaTime;
			if (this.healingTimer <= 0f)
			{
				this.healingTimer = this.healingInterval;
				this.DoHeal(this.fractionHealthHealing * this.healingInterval);
			}
			if (!this.targetBodyObject)
			{
				this.NetworktargetBodyObject = this.ownerBodyObject;
			}
			if (!this.ownerBodyObject)
			{
				UnityEngine.Object.Destroy(base.gameObject);
			}
		}

		private void Update()
		{
			this.UpdateMotion();
			base.transform.position += this.velocity * Time.deltaTime;
			base.transform.rotation = Quaternion.AngleAxis(this.rotationAngularVelocity * Time.deltaTime, Vector3.up) * base.transform.rotation;
			/*if (this.targetBodyObject)
			{
				this.indicator.transform.position = this.GetTargetPosition();
			}*/
		}

		[Server]
		private void DoHeal(float healFraction)
		{
			if (!NetworkServer.active)
			{
				return;
			}
			if (!this.cachedTargetHealthComponent)
			{
				return;
			}

			this.cachedTargetHealthComponent.HealFraction(healFraction, default(ProcChainMask));
		}

		public override void OnStartClient()
		{
			base.OnStartClient();
			base.transform.position = this.GetDesiredPosition();
		}

		private Vector3 GetTargetPosition()
		{
			GameObject gameObject = this.targetBodyObject ?? this.ownerBodyObject;
			if (!gameObject)
			{
				return base.transform.position;
			}
			CharacterBody component = gameObject.GetComponent<CharacterBody>();
			if (!component)
			{
				return gameObject.transform.position;
			}
			return component.corePosition;
		}

		private Vector3 GetDesiredPosition()
		{
			return this.GetTargetPosition();
		}

		private void UpdateMotion()
		{
			Vector3 desiredPosition = this.GetDesiredPosition();
			if (this.enableSpringMotion)
			{
				Vector3 lhs = desiredPosition - base.transform.position;
				if (lhs != Vector3.zero)
				{
					Vector3 a = lhs.normalized * this.acceleration;
					Vector3 b = this.velocity * -this.damping;
					this.velocity += (a + b) * Time.deltaTime;
					return;
				}
			}
			else
			{
				base.transform.position = Vector3.SmoothDamp(base.transform.position, desiredPosition, ref this.velocity, this.damping);
			}
		}

		public GameObject NetworkownerBodyObject
		{
			get
			{
				return this.ownerBodyObject;
			}
			set
			{
				base.SetSyncVarGameObject(value, ref this.ownerBodyObject, 1u, ref this.___ownerBodyObjectNetId);
			}
		}

		public GameObject NetworktargetBodyObject
		{
			get
			{
				return this.targetBodyObject;
			}
			set
			{
				base.SetSyncVarGameObject(value, ref this.targetBodyObject, 2u, ref this.___targetBodyObjectNetId);
			}
		}

		public override bool OnSerialize(NetworkWriter writer, bool forceAll)
		{
			if (forceAll)
			{
				writer.Write(this.ownerBodyObject);
				writer.Write(this.targetBodyObject);
				return true;
			}
			bool flag = false;
			if ((base.syncVarDirtyBits & 1u) != 0u)
			{
				if (!flag)
				{
					writer.WritePackedUInt32(base.syncVarDirtyBits);
					flag = true;
				}
				writer.Write(this.ownerBodyObject);
			}
			if ((base.syncVarDirtyBits & 2u) != 0u)
			{
				if (!flag)
				{
					writer.WritePackedUInt32(base.syncVarDirtyBits);
					flag = true;
				}
				writer.Write(this.targetBodyObject);
			}
			if (!flag)
			{
				writer.WritePackedUInt32(base.syncVarDirtyBits);
			}
			return flag;
		}

		public override void OnDeserialize(NetworkReader reader, bool initialState)
		{
			if (initialState)
			{
				this.___ownerBodyObjectNetId = reader.ReadNetworkId();
				this.___targetBodyObjectNetId = reader.ReadNetworkId();
				return;
			}
			int num = (int)reader.ReadPackedUInt32();
			if ((num & 1) != 0)
			{
				this.ownerBodyObject = reader.ReadGameObject();
			}
			if ((num & 2) != 0)
			{
				this.targetBodyObject = reader.ReadGameObject();
			}
		}

		public override void PreStartClient()
		{
			if (!this.___ownerBodyObjectNetId.IsEmpty())
			{
				this.NetworkownerBodyObject = ClientScene.FindLocalObject(this.___ownerBodyObjectNetId);
			}
			if (!this.___targetBodyObjectNetId.IsEmpty())
			{
				this.NetworktargetBodyObject = ClientScene.FindLocalObject(this.___targetBodyObjectNetId);
			}
		}

		public float fractionHealthHealing = 0.01f;
		public float fractionHealthBurst = 0.05f;
		public float healingInterval = 1f;
		public float rotationAngularVelocity = 30f;
		public float acceleration = 20f;
		public float damping = 0.1f;
		public bool enableSpringMotion = false;
		//public GameObject indicator;

		[SyncVar]
		public GameObject ownerBodyObject;

		[SyncVar]
		public GameObject targetBodyObject;

		//public GameObject burstHealEffect;
		//public GameObject indicator;
		private GameObject cachedTargetBodyObject;
		private HealthComponent cachedTargetHealthComponent;
		private float healingTimer;
		private Vector3 velocity = Vector3.zero;
		private NetworkInstanceId ___ownerBodyObjectNetId;
		private NetworkInstanceId ___targetBodyObjectNetId;
	}
}
